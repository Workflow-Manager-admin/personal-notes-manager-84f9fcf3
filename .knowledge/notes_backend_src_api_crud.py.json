{"is_source_file": true, "format": "Python", "description": "This file contains CRUD operations and utility functions for managing users and notes, using SQLAlchemy ORM for database interactions and passlib for password hashing.", "external_files": ["models", "schemas"], "external_methods": ["models.User", "models.Note", "models.datetime.datetime.utcnow", "schemas.UserCreate", "schemas.NoteCreate", "schemas.NoteUpdate"], "published": ["get_user_by_username", "create_user", "verify_password", "authenticate_user", "get_notes", "get_note", "create_note", "update_note", "delete_note"], "classes": [], "methods": [{"name": "Optional[models.User] get_user_by_username(db: Session, username: str)", "description": "Fetches a user from the database given the username.", "scope": "", "scopeKind": ""}, {"name": "models.User create_user(db: Session, user: schemas.UserCreate)", "description": "Creates a new user with hashed password, handles database commit and rollback on integrity errors.", "scope": "", "scopeKind": ""}, {"name": "verify_password(plain_password, hashed_password)", "description": "Verifies a plaintext password against a hashed password.", "scope": "", "scopeKind": ""}, {"name": "authenticate_user(db: Session, username: str, password: str)", "description": "Authenticates a user by username and password.", "scope": "", "scopeKind": ""}, {"name": "get_notes(db: Session, user_id: int)", "description": "Retrieves all notes for a specific user, ordered by last update time.", "scope": "", "scopeKind": ""}, {"name": "get_note(db: Session, note_id: int, user_id: int)", "description": "Retrieves a specific note for a user by note ID.", "scope": "", "scopeKind": ""}, {"name": "create_note(db: Session, note: schemas.NoteCreate, user_id: int)", "description": "Creates a new note for a user.", "scope": "", "scopeKind": ""}, {"name": "update_note(db: Session, note_id: int, note: schemas.NoteUpdate, user_id: int)", "description": "Updates an existing note's title and content.", "scope": "", "scopeKind": ""}, {"name": "delete_note(db: Session, note_id: int, user_id: int)", "description": "Deletes a specific note belonging to a user.", "scope": "", "scopeKind": ""}], "calls": ["db.query", "db.add", "db.commit", "db.refresh", "db.delete", "models.User", "models.Note", "models.datetime.datetime.utcnow", "schemas.UserCreate", "schemas.NoteCreate", "schemas.NoteUpdate"], "search-terms": ["crud operations", "password hashing", "note management", "SQLAlchemy session", "user authentication"], "state": 2, "file_id": 7, "knowledge_revision": 16, "git_revision": "", "ctags": [{"_type": "tag", "name": "authenticate_user", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/crud.py", "pattern": "/^def authenticate_user(db: Session, username: str, password: str):$/", "language": "Python", "kind": "function", "signature": "(db: Session, username: str, password: str)"}, {"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/crud.py", "pattern": "/^def create_note(db: Session, note: schemas.NoteCreate, user_id: int):$/", "language": "Python", "kind": "function", "signature": "(db: Session, note: schemas.NoteCreate, user_id: int)"}, {"_type": "tag", "name": "create_user", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/crud.py", "pattern": "/^def create_user(db: Session, user: schemas.UserCreate) -> models.User:$/", "language": "Python", "typeref": "typename:models.User", "kind": "function", "signature": "(db: Session, user: schemas.UserCreate)"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/crud.py", "pattern": "/^def delete_note(db: Session, note_id: int, user_id: int):$/", "language": "Python", "kind": "function", "signature": "(db: Session, note_id: int, user_id: int)"}, {"_type": "tag", "name": "get_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/crud.py", "pattern": "/^def get_note(db: Session, note_id: int, user_id: int):$/", "language": "Python", "kind": "function", "signature": "(db: Session, note_id: int, user_id: int)"}, {"_type": "tag", "name": "get_notes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/crud.py", "pattern": "/^def get_notes(db: Session, user_id: int):$/", "language": "Python", "kind": "function", "signature": "(db: Session, user_id: int)"}, {"_type": "tag", "name": "get_user_by_username", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/crud.py", "pattern": "/^def get_user_by_username(db: Session, username: str) -> Optional[models.User]:$/", "language": "Python", "typeref": "typename:Optional[models.User]", "kind": "function", "signature": "(db: Session, username: str)"}, {"_type": "tag", "name": "pwd_context", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/crud.py", "pattern": "/^pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")$/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/crud.py", "pattern": "/^def update_note(db: Session, note_id: int, note: schemas.NoteUpdate, user_id: int):$/", "language": "Python", "kind": "function", "signature": "(db: Session, note_id: int, note: schemas.NoteUpdate, user_id: int)"}, {"_type": "tag", "name": "verify_password", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/crud.py", "pattern": "/^def verify_password(plain_password, hashed_password):$/", "language": "Python", "kind": "function", "signature": "(plain_password, hashed_password)"}], "hash": "d37c2c8eb3ae88a9e6f70a515fec69fc", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/api/crud.py", "fields": [{"name": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"16": ""}]}