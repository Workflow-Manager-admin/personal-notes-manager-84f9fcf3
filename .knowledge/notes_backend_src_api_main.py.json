{"is_source_file": true, "format": "Python", "description": "The file is a FastAPI backend server implementation for a personal notes management application. It defines API endpoints for health checks, user registration, login, and CRUD operations for notes, utilizing dependencies such as database session management, authentication, and models.", "external_files": ["models", "schemas", "crud", "database", "auth"], "external_methods": ["database.init_db", "database.get_db", "auth.create_access_token", "auth.get_current_user", "crud.create_user", "crud.authenticate_user", "crud.get_notes", "crud.create_note", "crud.update_note", "crud.delete_note"], "published": ["app"], "classes": [{"name": "FastAPI", "description": "Main application instance for the web API."}], "methods": [{"name": "health_check()", "description": "Health check endpoint for API status.", "scope": "", "scopeKind": ""}, {"name": "register(user: schemas.UserCreate, db: Session = Depends(database.get_db))", "description": "Endpoint to register new users.", "scope": "", "scopeKind": ""}, {"name": "login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db))", "description": "Endpoint to authenticate users and issue JWT tokens.", "scope": "", "scopeKind": ""}, {"name": "list_notes(db: Session = Depends(database.get_db), current_user: models.User = Depends(auth.get_current_user))", "description": "Retrieve all notes for the authenticated user.", "scope": "", "scopeKind": ""}, {"name": "create_note(note: schemas.NoteCreate, db: Session = Depends(database.get_db), current_user: models.User = Depends(auth.get_current_user))", "description": "Create a new note for the current user.", "scope": "", "scopeKind": ""}, {"name": "update_note(note_id: int, note: schemas.NoteUpdate, db: Session = Depends(database.get_db), current_user: models.User = Depends(auth.get_current_user))", "description": "Update an existing note by ID for the current user.", "scope": "", "scopeKind": ""}, {"name": "delete_note(note_id: int, db: Session = Depends(database.get_db), current_user: models.User = Depends(auth.get_current_user))", "description": "Delete a note by ID for the current user.", "scope": "", "scopeKind": ""}], "calls": ["database.init_db()", "schemas.UserResponse", "schemas.UserCreate", "schemas.Token", "schemas.NoteResponse", "schemas.NoteCreate", "schemas.NoteUpdate", "crud.create_user", "crud.authenticate_user", "crud.get_notes", "crud.create_note", "crud.update_note", "crud.delete_note", "auth.create_access_token", "auth.get_current_user"], "search-terms": ["FastAPI notes backend", "API endpoints for notes app", "User registration and login", "JWT authentication", "CRUD notes API", "FastAPI middleware setup", "Database initialization"], "state": 2, "file_id": 1, "knowledge_revision": 19, "git_revision": "7c62340d84b028771eda55b6909bde9acc1dd963", "revision_history": [{"9": "04eba1f161ed0beb32014bfb2d694aa9b1a64dd6"}, {"19": "7c62340d84b028771eda55b6909bde9acc1dd963"}], "ctags": [{"_type": "tag", "name": "app", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/main.py", "pattern": "/^app = FastAPI($/", "language": "Python", "kind": "variable"}, {"_type": "tag", "name": "create_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/main.py", "pattern": "/^def create_note(note: schemas.NoteCreate, db: Session = Depends(database.get_db), current_user: /", "language": "Python", "kind": "function", "signature": "(note: schemas.NoteCreate, db: Session = Depends(database.get_db), current_user: models.User = Depends(auth.get_current_user))"}, {"_type": "tag", "name": "delete_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/main.py", "pattern": "/^def delete_note(note_id: int, db: Session = Depends(database.get_db), current_user: models.User /", "language": "Python", "kind": "function", "signature": "(note_id: int, db: Session = Depends(database.get_db), current_user: models.User = Depends(auth.get_current_user))"}, {"_type": "tag", "name": "health_check", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/main.py", "pattern": "/^def health_check():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "list_notes", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/main.py", "pattern": "/^def list_notes(db: Session = Depends(database.get_db), current_user: models.User = Depends(auth./", "language": "Python", "kind": "function", "signature": "(db: Session = Depends(database.get_db), current_user: models.User = Depends(auth.get_current_user))"}, {"_type": "tag", "name": "login", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/main.py", "pattern": "/^def login(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_d/", "language": "Python", "kind": "function", "signature": "(form_data: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db))"}, {"_type": "tag", "name": "register", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/main.py", "pattern": "/^def register(user: schemas.UserCreate, db: Session = Depends(database.get_db)):$/", "language": "Python", "kind": "function", "signature": "(user: schemas.UserCreate, db: Session = Depends(database.get_db))"}, {"_type": "tag", "name": "update_note", "path": "/home/kavia/workspace/code-generation/personal-notes-manager-84f9fcf3/notes_backend/src/api/main.py", "pattern": "/^def update_note(note_id: int, note: schemas.NoteUpdate, db: Session = Depends(database.get_db), /", "language": "Python", "kind": "function", "signature": "(note_id: int, note: schemas.NoteUpdate, db: Session = Depends(database.get_db), current_user: models.User = Depends(auth.get_current_user))"}], "hash": "d488de888d7a82c5228b7092d822cdd1", "format-version": 4, "code-base-name": "notes_backend", "filename": "notes_backend/src/api/main.py", "fields": [{"name": "app = FastAPI(", "scope": "", "scopeKind": "", "description": "unavailable"}]}